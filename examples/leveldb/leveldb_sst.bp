/*
 * LevelDB by Google, Inc.
 *
 * SST Table format
 *
 * https://github.com/google/leveldb/blob/master/doc/table_format.md
 */

type u32 byte[4]: integer(signed=false, endian=little);

type varint byte[]: varint();

struct DataBlock {
    DataBlockEntry[] entries;
    u32[nb_restarts] restarts;
    u32 nb_restarts;
};

struct DataBlockEntry {
    varint key_shared_size;
    varint key_non_shared_size;
    varint value_size;
    byte[key_non_shared_size] key_non_shared;
    byte[value_size] value;
};

struct IndexBlockEntry {
    DataBlockEntry;
    ?data_block_handle (BlockHandle) => value;
};

struct BlockTrailer {
    byte blocktype: integer(signed=false);
    u32 crc;
};

struct StoredBlock {
    if (trailer.blocktype == 0) { // uncompressed
        byte[] block;
        ?raw_block => block;
    }
    if (trailer.blocktype == 1) {
        byte[] data: snappy;
        ?raw_block => *data;
    }
    ?data_block (DataBlock) => ?raw_block;
    BlockTrailer trailer;
};

struct BlockHandle {
    varint offset;
    varint size;

    ?stored_block (StoredBlock)
        => data[offset : offset + size + sizeof(BlockTrailer)];
    ?raw_block => ?stored_block.?raw_block;
    ?data_block => ?stored_block.?data_block;
};

struct Footer {
    BlockHandle metaindex_handle;
    BlockHandle index_handle;
    byte[];
    byte[8] magic;
    span 48;
};

file {
    byte[] data;
    Footer footer;

    ?index => footer.index_handle.?data_block;
    ?index_entries (IndexBlockEntry[]) => ?index.entries;
    ?metaindex => footer.metaindex_handle.?data_block;
    ?metaindex_entries (IndexBlockEntry[]) => ?metaindex.entries;
}
