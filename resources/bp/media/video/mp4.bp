/*
 * ISO 14496-1 media format (MP4)
 *
 * Reference: http://xhelmboyx.tripod.com/formats/mp4-layout.txt
 */

let MP4Int = integer { @signed: false; @endian: 'big'; };

let u8  = [1] byte <> MP4Int;
let u16 = [2] byte <> MP4Int;
let u32 = [4] byte <> MP4Int;
let u64 = [8] byte <> MP4Int;

let Timestamp32 = u32;
let Timestamp64 = u64;

let Atom = [4] byte <> string;

let Transform = struct {
   scale: u32;
   rotate: u32;
   angle: u32;
};

let MP4 = struct {
     boxes: [] Box;
};

let Box = struct {
    hdr: struct {
        size: u32;
        atom: Atom;
    };

    if (hdr.atom == "ftyp") {
        major_brand: Atom;
        major_brand_version: u32;
        compatible_brands: [] Atom;
    }
    if (hdr.atom == "mvhd") {
        version: u8;
        flags: [3] u8;
        if (version == 0) {
            created: Timestamp32;
            modified: Timestamp32;
            timescale: u32;
            duration: u32;
        }
        if (version == 1) {
            created: Timestamp64;
            modified: Timestamp64;
            timescale: u32;
            duration: u64;
        }
        playback_speed: u32;
        user_volume: u16;
        [5] u16;
        width: Transform;
        height: Transform;
        left: u32;
        top: u32;
        divider: u32;
    }
    if (hdr.atom == "tkhd") {
        version: u8;
        flags: [3] u8;
        if (version == 0) {
            created: Timestamp32;
            modified: Timestamp32;
            track_id: u32;
            [2] u32;
            duration: u32;
        }
        if (version == 1) {
            created: Timestamp64;
            modified: Timestamp64;
            track_id: u32;
            [2] u32;
            duration: u64;
        }
        u32;
        video_layer: u16;
        alternate_track_id: u16;
        audio_volume: u16;
        u16;
        width: Transform;
        height: Transform;
        left: u32;
        top: u32;
        divider: u32;
        frame_width: u32;
        frame_height: u32;
    }
    if (hdr.atom == "elst") {
        version: u8;
        flags: [3] u8;
        nb_edits: u32;
        if (version == 0) {
            length: u32;
            start_time: u32;
        }
        if (version == 1) {
            length: u64;
            start_time: u64;
        }
        playback_speed: u32;
    }
    if (hdr.atom == "mdhd") {
        version: u8;
        flags: [3] u8;
        if (version == 0) {
            created: Timestamp32;
            modified: Timestamp32;
            timescale: u32;
            duration: u32;
        }
        if (version == 1) {
            created: Timestamp64;
            modified: Timestamp64;
            timescale: u32;
            duration: u64;
        }
    }
    if (hdr.atom == "hdlr") {
        version: u8;
        flags: [3] u8;
        quicktime_type: Atom;
        subtype_media: Atom;
        manufacturer: Atom;
        [2] u32;
    }
    if (hdr.atom == "vmhd") {
        version: u8;
        flags: [3] u8;
    }
    if (hdr.atom == "smhd") {
        version: u8;
        flags: [3] u8;
    }
    if (hdr.atom == "dref") {
        version: u8;
        flags: [3] u8;
    }
    if (hdr.atom == "stsd") {
        version: u8;
        flags: [3] u8;
        number_of_descriptions: u32;
    }
    if (hdr.atom == "stts") {
        let Duration = struct {
            frame_count: u32;
            duration: u32;
        };
        version: u8;
        flags: [3] u8;
        number_of_durations: u32;
        durations: [number_of_durations] Duration;
    }
    if (hdr.atom == "stss") {
        let KeyFrame = struct {
            framing_time: u32;
        };
        version: u8;
        flags: [3] u8;
        number_of_key_frames: u32;
        key_frames: [number_of_key_frames] KeyFrame;
    }
    if (hdr.atom == "ctts") {
        version: u8;
        flags: [3] u8;
    }
    if (hdr.atom == "stsc") {
        let Block = struct {
            block_id: u32;
            number_of_frames: u32;
            description_id: u32;
        };
        version: u8;
        flags: [3] u8;
        number_of_blocks: u32;
        blocks: [number_of_blocks] Block;
    }
    if (hdr.atom == "stsz") {
        version: u8;
        flags: [3] u8;
        frame_byte_size_for_all: u32;
        number_of_frame_sizes: u32;
        frame_sizes: [number_of_frame_sizes] u32;
    }
    if (hdr.atom == "stco") {
        version: u8;
        flags: [3] u8;
        number_of_block_offsets: u32;
        block_offsets: [number_of_block_offsets] u32;
    }
    if (hdr.atom == "mp4v" ||
        hdr.atom == "avc1" ||
        hdr.atom == "encv" ||
        hdr.atom == "s263") {
        skip: [6] byte;
        data_ref_key: u16;
        encoding_version: u16;
        encoding_revision_level: u16;
        encoding_vendor: u32;
        temporal_quality: u32;
        spatial_quality: u32;
        frame_pixel_width: u16;
        frame_pixel_height: u16;
        resolution_horizontal: u32;
        resolution_vertical: u32;
        data_size: u32;
        frame_count: u16;
        encoder_name_len: u8;
        encoder_name: [31] byte <> string;
        pixel_depth: u16;
        color_table_id: u16;
    }
    if (hdr.atom == "mp4a" ||
        hdr.atom == "enca" ||
        hdr.atom == "samr" ||
        hdr.atom == "sawb") {
        skip: [6] byte;
        data_ref_key: u16;
        encoding_version: u16;
        encoding_revision_level: u16;
        encoding_vendor: u32;
        channels: u16;
        sample_size: u16;
        compression_id: u16;
        packet_size: u16;
        sample_rate: u16;
    }
    if (hdr.atom == 'moov' ||
        hdr.atom == 'trak' ||
        hdr.atom == 'edts' ||
        hdr.atom == 'mdia' ||
        hdr.atom == 'minf' ||
        hdr.atom == 'dinf' ||
        hdr.atom == 'stbl') {
        boxes: [] Box;
        trailer: [] byte;
    } else {
        data: [] byte;
    }

    @span: hdr.size;
    @key: hdr.atom;
};
